function [y1] = NN_Baye(x1)
%NN_BAYE neural network simulation function.
%
% Auto-generated by MATLAB, 25-Sep-2019 18:09:32.
% 
% [y1] = NN_Baye(x1) takes these arguments:
%   x = 2xQ matrix, input #1
% and returns:
%   y = 1xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [1;-5];
x1_step1.gain = [0.181818181818182;0.0666666666666667];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.4879609208209068072;1.1409608912507422929;1.0101462517627102233;-3.2969780257690550762;0.77941798240584703183;-2.1077968832744256034;-5.1916012664178277092;0.26121233892657985676;-0.13595446490116522287;-1.2575474290080035367;-2.0636786357025731498;-1.3068424669446514486;1.9043659387595794907;1.8989289079821085604;5.8974579434624683216];
IW1_1 = [-1.3897815670935600441 1.1818042727323561092;-0.79997852349044085152 0.93660211059746178996;-0.33239706488307346754 0.47585203457633040713;1.613128685239099136 -5.4391398191032429565;-1.2653432815479448426 -1.9909333296744859965;5.4879272989413161454 14.515186070459456857;10.841826480311290481 15.509374667573124995;0.41949129491017467242 -1.575926708808833121;-11.132744664710257254 -7.9073037023194121531;0.116793470342540881 -3.0910804235881390589;5.5299092163840688485 14.473752912762885003;0.019684115754749775123 -3.0641581549309115928;2.8373981877891827352 1.6531225710768802095;2.8209606148646546586 1.4971930774552038024;7.7406381819646412623 1.5618891979099551737];

% Layer 2
b2 = -13.140133194407741968;
LW2_1 = [2.6849043870696327474 -11.573314909464492928 23.964244828398300058 0.16803421730102591214 1.0438092640393696886 2.4070442911290435006 0.036630596526438290172 1.4647907539622637696 0.018603715135333351999 5.3379836189601634899 -2.4199251703471471586 -5.1613337707260074083 -3.8332583881005009019 4.614510661268499625 0.1213790328380073974];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 4.07087079053814;
y1_step1.xoffset = 6.05437000792255e-05;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
